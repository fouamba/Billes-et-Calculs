Voici une synthèse et un plan d’action pour aligner la structure actuelle sur le nouveau cahier des charges et l’arborescence cible.

1. Analyse du cahier des charges et de l’arborescence cible
Cahier des charges ADDLEARN v2.0 (extraits)
Ajout d’un LRS (Learning Locker) et traçabilité xAPI : intégration d’un pipeline Learning Analytics avancé, stockage MongoDB Atlas, dashboards, API GraphQL, intégration RStudio.
Architecture modulaire : séparation claire frontend (Next.js/Three.js), backend (API, Prisma, xAPI), services analytiques, et interopérabilité.
Composants spécialisés : 3D, UI, analytics, speech, adaptatif, etc.
Sécurité, RGPD, tests, performance : conformité et scalabilité.
Arborescence cible (addlearn-folder-structure.md)
Séparation claire : apps/web/src/components/three, /ui, /activity, /analytics, /speech, /services/xapi, /services/analytics, /services/adaptive, /services/speech, /services/r-studio, /hooks, /lib, etc.
Dossiers pour chaque domaine métier : 3D, activités, analytics, adaptatif, etc.
Services spécialisés : xAPI, analytics, adaptatif, speech, RStudio.
Préparation à la scalabilité et à la recherche.
2. Écart avec la structure actuelle
Actuellement :

Les composants 3D, UI, analytics, etc. sont présents mais pas toujours dans des sous-dossiers spécialisés.
Les services (xAPI, analytics, adaptatif, speech) sont dans src/utils/ ou src/hooks/ ou src/stores/.
Les routes API sont dans src/pages/api/ (Next.js).
Pas de séparation explicite pour les services RStudio, batchers, etc.
Pas de dossier services/ ni de sous-structure fine pour chaque domaine.
À migrer :

Déplacer/renommer les composants et services dans les sous-dossiers spécialisés selon l’arborescence cible.
Créer les dossiers manquants (services/xapi, services/analytics, etc.).
Adapter les imports dans tout le code.
3. Plan d’action concret
Étape 1 : Création de la structure cible
Créer les dossiers manquants dans src :

components/three/scenes/, components/three/objects/, components/three/controls/, components/three/effects/
components/ui/, components/activity/, components/analytics/, components/speech/
services/xapi/, services/analytics/, services/adaptive/, services/speech/, services/r-studio/
hooks/ (si besoin de spécialisation)
lib/ (pour Prisma, MongoDB, etc.)
Étape 2 : Migration des fichiers
3D :
Déplacer ClassroomScene.tsx, MarbleComponent.tsx, TeacherAvatar.tsx dans components/three/objects/ ou components/three/scenes/.
UI :
Déplacer les composants UI réutilisables dans components/ui/.
Activités :
Déplacer la logique d’activité (composition, décomposition, phases, input) dans components/activity/.
Analytics :
Déplacer les composants et services analytics dans components/analytics/ et services/analytics/.
xAPI :
Créer services/xapi/ et y placer le service xAPI, les types, le batcher, le vocabulaire.
Speech :
Créer components/speech/ et services/speech/ pour la synthèse et la reconnaissance vocale.
Adaptatif :
Créer services/adaptive/ pour la logique adaptative, la génération de nombres, la progression.
RStudio :
Créer services/r-studio/ pour l’intégration RStudio.
Types :
Organiser les types dans types/three/, types/activity/, etc.
Étape 3 : Mise à jour des imports
Adapter tous les imports dans le code pour refléter les nouveaux chemins.
Étape 4 : Nettoyage et documentation
Supprimer les anciens dossiers/fichiers une fois la migration validée.
Documenter la migration dans docs/architecture/migration-log.md.
Étape 5 : Vérification
Vérifier le build, les tests, et l’intégration continue.
S’assurer que la structure respecte bien le cahier des charges et l’arborescence cible.
4. Script de migration (PowerShell)
Je peux générer un script PowerShell adapté à votre structure pour automatiser la création des dossiers et le déplacement des fichiers principaux.

Souhaitez-vous que je génère ce script de migration personnalisé pour votre projet ?
Ou souhaitez-vous une liste détaillée des correspondances (fichier source → destination) ?






Script pour la migration


# Script de migration ADDLEARN v2.0 (à exécuter depuis la racine du projet)

# 1. Création de la structure cible (frontend/src)
$base = "frontend/src"

# Composants 3D
New-Item -ItemType Directory -Force -Path "$base/components/three/scenes"
New-Item -ItemType Directory -Force -Path "$base/components/three/objects"
New-Item -ItemType Directory -Force -Path "$base/components/three/controls"
New-Item -ItemType Directory -Force -Path "$base/components/three/effects"

# UI, activités, analytics, speech
New-Item -ItemType Directory -Force -Path "$base/components/ui"
New-Item -ItemType Directory -Force -Path "$base/components/activity"
New-Item -ItemType Directory -Force -Path "$base/components/analytics"
New-Item -ItemType Directory -Force -Path "$base/components/speech"

# Services spécialisés
New-Item -ItemType Directory -Force -Path "$base/services/xapi"
New-Item -ItemType Directory -Force -Path "$base/services/analytics"
New-Item -ItemType Directory -Force -Path "$base/services/adaptive"
New-Item -ItemType Directory -Force -Path "$base/services/speech"
New-Item -ItemType Directory -Force -Path "$base/services/r-studio"

# Hooks et lib
New-Item -ItemType Directory -Force -Path "$base/hooks"
New-Item -ItemType Directory -Force -Path "$base/lib"

# Types
New-Item -ItemType Directory -Force -Path "$base/types/three"
New-Item -ItemType Directory -Force -Path "$base/types/activity"

# 2. Déplacement/Copie des fichiers principaux (à adapter selon vos fichiers)
# 3D
Copy-Item "$base/components/three/ClassroomScene.tsx" "$base/components/three/scenes/ClassroomScene.tsx"
Copy-Item "$base/components/three/MarbleComponent.tsx" "$base/components/three/objects/MarbleComponent.tsx"
Copy-Item "$base/components/three/TeacherAvatar.tsx" "$base/components/three/objects/TeacherAvatar.tsx"

# UI
Copy-Item "$base/components/ui/*" "$base/components/ui/" -Recurse

# Activités
Copy-Item "$base/components/game/GameScene3D/GamePage.tsx" "$base/components/activity/GamePage.tsx"

# Analytics
Copy-Item "$base/components/analytics/*" "$base/components/analytics/" -Recurse
Copy-Item "$base/utils/AnalyticsService.ts" "$base/services/analytics/AnalyticsService.ts"

# xAPI
Copy-Item "$base/utils/xapiService.ts" "$base/services/xapi/xapi.service.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/xapi.types.ts" "$base/services/xapi/xapi.types.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/statements.builder.ts" "$base/services/xapi/statements.builder.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/vocabulary.ts" "$base/services/xapi/vocabulary.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/batcher.ts" "$base/services/xapi/batcher.ts" -ErrorAction SilentlyContinue

# Adaptatif
Copy-Item "$base/utils/AdaptiveSystemService.ts" "$base/services/adaptive/AdaptiveSystemService.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/CalculatorService.ts" "$base/services/adaptive/CalculatorService.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/pedagogicRules.ts" "$base/services/adaptive/pedagogicRules.ts" -ErrorAction SilentlyContinue

# Speech
Copy-Item "$base/utils/DialogueSystemService.ts" "$base/services/speech/DialogueSystemService.ts" -ErrorAction SilentlyContinue

# RStudio
# (À créer selon vos besoins)

# Hooks
Copy-Item "$base/hooks/*" "$base/hooks/" -Recurse

# Types
Copy-Item "$base/types/*" "$base/types/" -Recurse

# Lib
Copy-Item "$base/utils/prisma.ts" "$base/lib/prisma.ts" -ErrorAction SilentlyContinue
Copy-Item "$base/utils/mongodb.ts" "$base/lib/mongodb.ts" -ErrorAction SilentlyContinue

# 3. Documentation migration
New-Item -ItemType File -Path "$base/../docs/architecture/migration-log.md" -Force

Write-Host "Migration terminée. Vérifiez les nouveaux dossiers, adaptez les imports, puis supprimez les anciens fichiers après validation."




Liste des correspondances

1. Composants 3D
Source	Destination
src/components/three/ClassroomScene.tsx	src/components/three/scenes/ClassroomScene.tsx
src/components/three/MarbleComponent.tsx	src/components/three/objects/MarbleComponent.tsx
src/components/three/TeacherAvatar.tsx	src/components/three/objects/TeacherAvatar.tsx
(Ajouter d’autres objets 3D si besoin)	src/components/three/objects/
2. UI réutilisable
Source	Destination
src/components/ui/* (boutons, cartes, dialogues, etc.)	src/components/ui/
3. Activités pédagogiques
Source	Destination
GamePage.tsx	GamePage.tsx
(Ajouter d’autres modules d’activité)	src/components/activity/
4. Analytics
Source	Destination
src/components/analytics/*	src/components/analytics/
src/utils/AnalyticsService.ts	src/services/analytics/AnalyticsService.ts
(Ajouter d’autres services analytics)	src/services/analytics/
5. xAPI
Source	Destination
src/utils/xapiService.ts	src/services/xapi/xapi.service.ts
src/utils/xapi.types.ts	src/services/xapi/xapi.types.ts
src/utils/statements.builder.ts	src/services/xapi/statements.builder.ts
src/utils/vocabulary.ts	src/services/xapi/vocabulary.ts
src/utils/batcher.ts	src/services/xapi/batcher.ts
6. Adaptatif
Source	Destination
src/utils/AdaptiveSystemService.ts	src/services/adaptive/AdaptiveSystemService.ts
src/utils/CalculatorService.ts	src/services/adaptive/CalculatorService.ts
src/utils/pedagogicRules.ts	src/services/adaptive/pedagogicRules.ts
7. Speech (Synthèse et reconnaissance vocale)
Source	Destination
src/utils/DialogueSystemService.ts	src/services/speech/DialogueSystemService.ts
(Ajouter d’autres services speech si besoin)	src/services/speech/
8. RStudio (intégration analytique)
Source	Destination
(À créer selon vos besoins)	src/services/r-studio/
9. Hooks et utilitaires
Source	Destination
src/hooks/*	src/hooks/
src/utils/prisma.ts	src/lib/prisma.ts
src/utils/mongodb.ts	src/lib/mongodb.ts
10. Types
Source	Destination
src/types/activity.ts	src/types/activity/activity.ts
src/types/session.ts	src/types/activity/session.ts
src/types/speech.ts	src/types/activity/speech.ts
src/types/user.ts	src/types/activity/user.ts
(Ajouter types 3D si besoin)	src/types/three/
11. Documentation migration
Source	Destination
(À créer)	docs/architecture/migration-log.md
Remarques importantes
Adaptez les chemins si certains fichiers sont absents ou déjà bien placés.
Complétez la migration pour les nouveaux modules (speech, RStudio, analytics avancé) selon l’évolution du projet.
Après migration, mettez à jour tous les imports dans le code source.
Testez le build et supprimez les anciens fichiers/dossiers après validation.
